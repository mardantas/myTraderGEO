version: '3.8'

# ==================================
# myTraderGEO - Staging Environment
# ==================================
# Usage: 05-infra/scripts/deploy.sh staging
# Architecture: Cloudflare -> Traefik (Let's Encrypt) -> API/Frontend

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: traefik-staging
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    environment:
      - ACME_EMAIL=${ACME_EMAIL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ../configs/traefik.yml:/etc/traefik/traefik.yml:ro
      - traefik_letsencrypt:/letsencrypt
      - traefik_logs:/var/log/traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.staging.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_DASHBOARD_AUTH}"
    networks:
      - mytrader-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api:
    image: ${DOCKER_REGISTRY:-ghcr.io/seu-usuario}/mytrader-api:staging
    expose:
      - "8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=${DATABASE_URL_STAGING}
      - JwtSettings__Secret=${JWT_SECRET}
      - JwtSettings__Issuer=myTraderGEO
      - JwtSettings__Audience=myTraderGEO
      - JwtSettings__ExpirationMinutes=60
      - Logging__LogLevel__Default=Information
      - Serilog__MinimumLevel__Default=Information
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-staging.rule=Host(`api.staging.${DOMAIN}`)"
      - "traefik.http.routers.api-staging.entrypoints=websecure"
      - "traefik.http.routers.api-staging.tls.certresolver=letsencrypt"
      - "traefik.http.services.api-staging.loadbalancer.server.port=8080"
    networks:
      - mytrader-network
    depends_on:
      database:
        condition: service_healthy
      traefik:
        condition: service_started

  frontend:
    image: ${DOCKER_REGISTRY:-ghcr.io/seu-usuario}/mytrader-frontend:staging
    expose:
      - "80"
    environment:
      - VITE_API_URL=https://api.staging.${DOMAIN}
      - VITE_WS_URL=wss://api.staging.${DOMAIN}/hubs/market
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-staging.rule=Host(`staging.${DOMAIN}`)"
      - "traefik.http.routers.frontend-staging.entrypoints=websecure"
      - "traefik.http.routers.frontend-staging.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend-staging.loadbalancer.server.port=80"
    networks:
      - mytrader-network
    depends_on:
      - api
      - traefik

  database:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${DB_NAME_STAGING:-mytrader_staging}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ../../04-database/init-scripts:/docker-entrypoint-initdb.d
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mytrader-network

volumes:
  postgres_staging_data:
  traefik_letsencrypt:
  traefik_logs:

networks:
  mytrader-network:
    driver: bridge
