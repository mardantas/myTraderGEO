-- ============================================================================
-- Migration: 002_update_production_passwords.sql
-- Purpose: Update database user passwords for staging/production environments
-- Author: DBA Agent
-- Created: {YYYY-MM-DD}
-- ============================================================================

-- ⚠️ WARNING: This migration should ONLY be executed on staging/production
-- Development continues using dev_password_123 from init script

-- ============================================================================
-- IMPORTANT SECURITY NOTES:
-- ============================================================================
-- 1. ✅ This file is COMMITTED to Git WITHOUT real passwords
-- 2. ❌ DO NOT hardcode passwords in this file
-- 3. ✅ Passwords are passed via psql -v parameter from environment variables
-- 4. ❌ DO NOT execute on development (use dev passwords from init script)
-- 5. ✅ Document execution in password-rotation.log

-- ============================================================================
-- USAGE:
-- ============================================================================
-- export DB_APP_PASSWORD="St@g!ng_SecureP@ss2025!#"
-- export DB_READONLY_PASSWORD="St@g!ng_ReadOnly2025!#"
-- psql -h $DB_HOST -U postgres -d {project}_dev \
--   -v app_password="$DB_APP_PASSWORD" \
--   -v readonly_password="$DB_READONLY_PASSWORD" \
--   -f 04-database/migrations/002_update_production_passwords.sql

-- ============================================================================
-- EXECUTION CHECKLIST:
-- ============================================================================
-- [ ] Server is staging or production (NOT development)
-- [ ] Environment variables set (DB_APP_PASSWORD, DB_READONLY_PASSWORD)
-- [ ] Passwords meet complexity requirements (16+ staging, 20+ production)
-- [ ] Backup created before execution
-- [ ] Application will be restarted after execution
-- [ ] Password rotation documented in password-rotation.log

-- ============================================================================
-- PASSWORD REQUIREMENTS:
-- ============================================================================
-- Staging:
--   - Minimum 16 characters
--   - Mix of uppercase, lowercase, numbers, symbols
--   - Example: St@g!ng_SecureP@ss2025!#
--
-- Production:
--   - Minimum 20 characters
--   - Mix of uppercase, lowercase, numbers, symbols
--   - Example: Pr0d_V3ry$trong#P@ssw0rd2025!
--
-- Generate strong passwords:
--   openssl rand -base64 20 | tr -d "=+/" | cut -c1-20  # Staging
--   openssl rand -base64 32 | tr -d "=+/" | cut -c1-32  # Production

-- ============================================================================
-- BEGIN TRANSACTION
-- ============================================================================
BEGIN;

-- Update application user password
ALTER USER {project}_app WITH PASSWORD :'app_password';

-- Update readonly user password
ALTER USER {project}_readonly WITH PASSWORD :'readonly_password';

-- Log password change (do NOT log password itself!)
DO $$
BEGIN
    RAISE NOTICE '========================================';
    RAISE NOTICE 'Database passwords updated successfully';
    RAISE NOTICE 'Timestamp: %', NOW();
    RAISE NOTICE 'Environment: % (detected from hostname)', current_setting('cluster_name', true);
    RAISE NOTICE 'Users updated: {project}_app, {project}_readonly';
    RAISE NOTICE '========================================';
    RAISE NOTICE '';
    RAISE NOTICE 'NEXT STEPS:';
    RAISE NOTICE '1. Update .env file with new passwords (on server)';
    RAISE NOTICE '2. Restart application: docker compose restart api';
    RAISE NOTICE '3. Verify connection: docker compose logs api';
    RAISE NOTICE '4. Document rotation: echo "$(date) - Password rotated" >> password-rotation.log';
END $$;

-- Commit transaction
COMMIT;

-- ============================================================================
-- VERIFICATION QUERIES (Run after migration):
-- ============================================================================

-- Verify password was changed (will NOT show password, just connection test)
-- \c {project}_dev {project}_app
-- SELECT 'Password updated successfully' AS status;

-- ============================================================================
-- ROLLBACK (if needed):
-- ============================================================================
-- If migration fails, transaction will automatically rollback
-- No manual rollback needed

-- ============================================================================
-- COMPLIANCE:
-- ============================================================================
-- This migration supports:
-- - LGPD Art. 46: Technical measures for personal data protection
-- - SOC2: Access control and password management
-- - ISO 27001: Password policy compliance

-- ============================================================================
-- ROTATION SCHEDULE:
-- ============================================================================
-- Staging: Semi-annual (every 6 months)
-- Production: Quarterly (every 3 months)
--
-- Last rotation: {YYYY-MM-DD}
-- Next rotation: {YYYY-MM-DD} (add 3 or 6 months)

-- ============================================================================
-- END OF MIGRATION
-- ============================================================================
