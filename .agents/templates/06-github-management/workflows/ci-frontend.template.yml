name: Frontend CI

on:
  push:
    branches: [ develop, main ]
    paths:
      - '01-frontend/**'
      - '.github/workflows/ci-frontend.yml'
  pull_request:
    branches: [ develop, main ]
    paths:
      - '01-frontend/**'
      - '.github/workflows/ci-frontend.yml'

env:
  NODE_VERSION: '[NODE_VERSION]'  # From PE-00: e.g., '20.x'
  FRONTEND_PATH: '01-frontend'
  PACKAGE_MANAGER: '[PACKAGE_MANAGER]'  # From PE-00: npm, yarn, or pnpm

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: ${{ env.PACKAGE_MANAGER }}
        cache-dependency-path: ${{ env.FRONTEND_PATH }}/package-lock.json

    - name: Install dependencies
      run: |
        if [ "${{ env.PACKAGE_MANAGER }}" = "npm" ]; then
          npm ci
        elif [ "${{ env.PACKAGE_MANAGER }}" = "yarn" ]; then
          yarn install --frozen-lockfile
        elif [ "${{ env.PACKAGE_MANAGER }}" = "pnpm" ]; then
          pnpm install --frozen-lockfile
        fi
      working-directory: ${{ env.FRONTEND_PATH }}

    - name: Lint code
      run: |
        if [ "${{ env.PACKAGE_MANAGER }}" = "npm" ]; then
          npm run lint
        elif [ "${{ env.PACKAGE_MANAGER }}" = "yarn" ]; then
          yarn lint
        elif [ "${{ env.PACKAGE_MANAGER }}" = "pnpm" ]; then
          pnpm lint
        fi
      working-directory: ${{ env.FRONTEND_PATH }}

    - name: Type check
      run: |
        if [ "${{ env.PACKAGE_MANAGER }}" = "npm" ]; then
          npm run type-check
        elif [ "${{ env.PACKAGE_MANAGER }}" = "yarn" ]; then
          yarn type-check
        elif [ "${{ env.PACKAGE_MANAGER }}" = "pnpm" ]; then
          pnpm type-check
        fi
      working-directory: ${{ env.FRONTEND_PATH }}

    - name: Run unit tests
      run: |
        if [ "${{ env.PACKAGE_MANAGER }}" = "npm" ]; then
          npm run test:unit
        elif [ "${{ env.PACKAGE_MANAGER }}" = "yarn" ]; then
          yarn test:unit
        elif [ "${{ env.PACKAGE_MANAGER }}" = "pnpm" ]; then
          pnpm test:unit
        fi
      working-directory: ${{ env.FRONTEND_PATH }}

    - name: Build
      run: |
        if [ "${{ env.PACKAGE_MANAGER }}" = "npm" ]; then
          npm run build
        elif [ "${{ env.PACKAGE_MANAGER }}" = "yarn" ]; then
          yarn build
        elif [ "${{ env.PACKAGE_MANAGER }}" = "pnpm" ]; then
          pnpm build
        fi
      working-directory: ${{ env.FRONTEND_PATH }}
      env:
        NODE_ENV: production

    # Optional: Upload build artifacts
    - name: Upload build artifacts
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ github.sha }}
        path: ${{ env.FRONTEND_PATH }}/dist
        retention-days: 7

  # Optional: Build Docker image for frontend
  build-docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.FRONTEND_PATH }}
        push: false
        tags: [PROJECT_NAME]-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
