name: CD Production (Manual Approval)

# Manual workflow dispatch with version input
# Requires approval before deploying to production
# Deploys to production server via SSH/SCP using deploy.sh script
# Integrates with PE-00-Environments-Setup.md deployment strategy

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.2.3, latest)'
        required: true
        default: 'latest'
        type: string

env:
  ENVIRONMENT: production

jobs:
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest

    environment:
      name: production
      url: https://${{ secrets.DOMAIN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Version Input
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Deploying version: $VERSION"

          if [ -z "$VERSION" ]; then
            echo "‚ùå Version input is empty"
            exit 1
          fi

          echo "‚úÖ Version validated: $VERSION"

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Verify SSH Connection
        run: |
          ssh -o BatchMode=yes -o ConnectTimeout=5 \
            [project]_app@[project]-prod "echo 'SSH connection successful'"

      - name: Backup Database (Optional)
        run: |
          echo "‚ö†Ô∏è Database backup recommended before production deployment"
          echo "To enable automatic backup, uncomment remote_backup_database() in deploy.sh"

          # Optional: Trigger backup via SSH
          # ssh [project]_app@[project]-prod "cd ~/[project] && ./scripts/backup-db.sh production"

      - name: Deploy to Production Server
        run: |
          chmod +x ./deploy.sh
          ./deploy.sh production ${{ github.event.inputs.version }}

      - name: Health Check
        run: |
          echo "Running health check on https://api.${{ secrets.DOMAIN }}/health"

          # Retry logic (30 attempts, 5s interval)
          MAX_ATTEMPTS=30
          SLEEP_INTERVAL=5

          for i in $(seq 1 $MAX_ATTEMPTS); do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 5 \
              https://api.${{ secrets.DOMAIN }}/health || echo "000")

            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "‚úÖ Health check passed (HTTP $HTTP_STATUS) after $i attempts"
              exit 0
            else
              echo "‚è≥ Attempt $i/$MAX_ATTEMPTS: Health check returned HTTP $HTTP_STATUS. Retrying in ${SLEEP_INTERVAL}s..."
              sleep $SLEEP_INTERVAL
            fi
          done

          echo "‚ùå Health check failed after $MAX_ATTEMPTS attempts"
          exit 1

      - name: Create Deployment Tag
        if: success() && github.event.inputs.version != 'latest'
        run: |
          VERSION="${{ github.event.inputs.version }}"
          TIMESTAMP=$(date '+%Y-%m-%d_%H-%M-%S')

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          TAG_NAME="deployed-${VERSION}-${TIMESTAMP}"

          git tag -a "$TAG_NAME" \
            -m "Deployed $VERSION to production on $TIMESTAMP"

          git push origin "$TAG_NAME"

          echo "‚úÖ Created deployment tag: $TAG_NAME"

      - name: Deployment Summary
        if: always()
        run: |
          echo "### üöÄ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** production" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Approved by:** (see environment protection rules)" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend:** https://${{ secrets.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend API:** https://api.${{ secrets.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Traefik Dashboard:** https://traefik.${{ secrets.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìù Rollback Instructions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "If deployment fails, rollback to previous version:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "ssh [project]_app@[project]-prod" >> $GITHUB_STEP_SUMMARY
          echo "cd ~/[project]" >> $GITHUB_STEP_SUMMARY
          echo "./deploy.sh production <previous-version>" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  notify-success:
    name: Notify Deployment Success
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()

    steps:
      - name: Deployment Success
        run: |
          echo "‚úÖ Production deployment successful!"
          echo "Version: ${{ github.event.inputs.version }}"
          echo "Frontend: https://${{ secrets.DOMAIN }}"
          echo "Backend API: https://api.${{ secrets.DOMAIN }}"

      # Optional: Send notification to Slack/Discord/Email
      # - name: Slack Notification
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: success
      #     text: 'üéâ Production deployment successful! Version: ${{ github.event.inputs.version }}'
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  notify-failure:
    name: Notify Deployment Failure
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()

    steps:
      - name: Deployment Failed
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Version: ${{ github.event.inputs.version }}"
          echo "Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          echo "Rollback instructions:"
          echo "  ssh [project]_app@[project]-prod"
          echo "  cd ~/[project]"
          echo "  ./deploy.sh production <previous-version>"
          exit 1

      # Optional: Send notification to Slack/Discord/Email
      # - name: Slack Notification
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: failure
      #     text: 'üö® Production deployment FAILED! Version: ${{ github.event.inputs.version }}'
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
