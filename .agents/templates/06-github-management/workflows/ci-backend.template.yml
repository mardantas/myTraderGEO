name: Backend CI

on:
  push:
    branches: [ develop, main ]
    paths:
      - '02-backend/**'
      - '.github/workflows/ci-backend.yml'
  pull_request:
    branches: [ develop, main ]
    paths:
      - '02-backend/**'
      - '.github/workflows/ci-backend.yml'

env:
  DOTNET_VERSION: '[DOTNET_VERSION]'  # From PE-00: e.g., '8.0.x'
  BACKEND_PATH: '02-backend'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ${{ env.BACKEND_PATH }}

    - name: Build
      run: dotnet build --no-restore --configuration Release
      working-directory: ${{ env.BACKEND_PATH }}

    - name: Run unit tests
      run: dotnet test --no-build --configuration Release --filter "Category=Unit" --verbosity normal --logger "trx;LogFileName=unit-test-results.trx"
      working-directory: ${{ env.BACKEND_PATH }}

    - name: Run integration tests
      run: dotnet test --no-build --configuration Release --filter "Category=Integration" --verbosity normal --logger "trx;LogFileName=integration-test-results.trx"
      working-directory: ${{ env.BACKEND_PATH }}
      env:
        # Add environment variables for integration tests if needed
        ASPNETCORE_ENVIRONMENT: Test

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          ${{ env.BACKEND_PATH }}/**/TestResults/*.trx

    # Optional: Code coverage
    - name: Generate code coverage report
      if: false  # Enable if you want code coverage
      run: |
        dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage
      working-directory: ${{ env.BACKEND_PATH }}

    - name: Upload coverage to Codecov
      if: false  # Enable if using Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ${{ env.BACKEND_PATH }}/coverage
        flags: backend
        fail_ci_if_error: false

  # Optional: Build Docker image for backend
  build-docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.BACKEND_PATH }}
        push: false
        tags: [PROJECT_NAME]-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
