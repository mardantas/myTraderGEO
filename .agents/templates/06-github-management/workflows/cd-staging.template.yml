name: CD Staging (Auto-Deploy)

# Triggered automatically on push to main branch
# Deploys to staging server via SSH/SCP using deploy.sh script
# Integrates with PE-00-Environments-Setup.md deployment strategy

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  ENVIRONMENT: staging
  VERSION: latest

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest

    environment:
      name: staging
      url: https://staging.${{ secrets.DOMAIN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_STAGING }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Verify SSH Connection
        run: |
          ssh -o BatchMode=yes -o ConnectTimeout=5 \
            [project]_app@[project]-stage "echo 'SSH connection successful'"

      - name: Deploy to Staging Server
        run: |
          chmod +x ./deploy.sh
          ./deploy.sh staging latest

      - name: Health Check
        run: |
          echo "Running health check on https://api-staging.${{ secrets.DOMAIN }}/health"

          # Retry logic (30 attempts, 5s interval)
          MAX_ATTEMPTS=30
          SLEEP_INTERVAL=5

          for i in $(seq 1 $MAX_ATTEMPTS); do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 5 \
              https://api-staging.${{ secrets.DOMAIN }}/health || echo "000")

            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "‚úÖ Health check passed (HTTP $HTTP_STATUS) after $i attempts"
              exit 0
            else
              echo "‚è≥ Attempt $i/$MAX_ATTEMPTS: Health check returned HTTP $HTTP_STATUS. Retrying in ${SLEEP_INTERVAL}s..."
              sleep $SLEEP_INTERVAL
            fi
          done

          echo "‚ùå Health check failed after $MAX_ATTEMPTS attempts"
          exit 1

      - name: Deployment Summary
        if: always()
        run: |
          echo "### üöÄ Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** staging" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** latest" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend:** https://staging.${{ secrets.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend API:** https://api-staging.${{ secrets.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Traefik Dashboard:** https://traefik-staging.${{ secrets.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  notify-on-failure:
    name: Notify Deployment Failure
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: failure()

    steps:
      - name: Deployment Failed
        run: |
          echo "‚ùå Staging deployment failed!"
          echo "Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          exit 1

      # Optional: Send notification to Slack/Discord/Email
      # - name: Slack Notification
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     text: 'Staging deployment failed'
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
