name: Frontend CI/CD (Vue 3)

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
    paths:
      - 'src/frontend/**'
      - '.github/workflows/ci-frontend.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'src/frontend/**'
      - '.github/workflows/ci-frontend.yml'

env:
  NODE_VERSION: '20.x'
  WORKING_DIRECTORY: 'src/frontend'

jobs:
  lint:
    name: Lint (ESLint + TypeScript)
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: TypeScript type check
        run: npm run type-check

  test:
    name: Unit Tests (Vitest)
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit -- --coverage

      - name: Upload coverage to Codecov
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v4
        with:
          files: ${{ env.WORKING_DIRECTORY }}/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ env.WORKING_DIRECTORY }}/coverage

  build:
    name: Build (Vite)
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Check build size
        run: |
          echo "=== Build Size Report ==="
          du -sh dist
          du -sh dist/assets/*.js | head -10
          echo "========================"

      - name: Upload build artifacts
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.WORKING_DIRECTORY }}/dist
          retention-days: 7

  security-audit:
    name: Security Audit (npm audit)
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Run npm audit
        run: |
          npm audit --production --audit-level=moderate || {
            echo "::warning::Vulnerabilidades encontradas em dependências npm"
            npm audit --production --audit-level=moderate
            exit 0
          }

  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [build]

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: ${{ env.WORKING_DIRECTORY }}/playwright-report
          retention-days: 7

  build-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./05-infra/dockerfiles/frontend/Dockerfile
          push: false
          tags: |
            mytrader-frontend:${{ github.sha }}
            mytrader-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker image size check
        run: |
          docker images mytrader-frontend:latest --format "{{.Size}}" > image-size.txt
          echo "Docker image size: $(cat image-size.txt)"

  notify-completion:
    name: Notify CI Completion
    runs-on: ubuntu-latest
    needs: [lint, test, build, security-audit]
    if: always()

    steps:
      - name: CI Status Summary
        run: |
          echo "=== Frontend CI/CD Summary ==="
          echo "Lint: ${{ needs.lint.result }}"
          echo "Unit Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"

          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ CI FAILED"
            exit 1
          else
            echo "✅ CI PASSED"
          fi
