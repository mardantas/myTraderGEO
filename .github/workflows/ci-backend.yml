name: Backend CI/CD (.NET 8)

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
    paths:
      - 'src/backend/**'
      - '.github/workflows/ci-backend.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'src/backend/**'
      - '.github/workflows/ci-backend.yml'

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_PATH: 'src/backend/myTraderGEO.sln'
  BUILD_CONFIGURATION: 'Release'

jobs:
  build-and-test:
    name: Build & Test (.NET 8)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build solution
        run: |
          dotnet build ${{ env.SOLUTION_PATH }} \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-restore \
            --verbosity normal

      - name: Run Unit Tests
        run: |
          dotnet test ${{ env.SOLUTION_PATH }} \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --no-build \
            --verbosity normal \
            --logger "trx;LogFileName=test-results.trx" \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: coverage/*.trx

      - name: Upload Code Coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: coverage/**/coverage.cobertura.xml

      - name: Code Coverage Report (Codecov)
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/**/coverage.cobertura.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false  # Não bloquear CI se Codecov falhar

  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Check code formatting (dotnet format)
        run: |
          dotnet format ${{ env.SOLUTION_PATH }} \
            --verify-no-changes \
            --verbosity diagnostic

  security-scan:
    name: Security Scan (Dependencies)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Run NuGet vulnerability scan
        run: |
          dotnet list ${{ env.SOLUTION_PATH }} package --vulnerable --include-transitive 2>&1 | tee vulnerability-report.txt
          if grep -q "has the following vulnerable packages" vulnerability-report.txt; then
            echo "::warning::Vulnerabilidades encontradas em dependências NuGet"
            cat vulnerability-report.txt
          fi

  build-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./05-infra/dockerfiles/backend/Dockerfile
          push: false
          tags: |
            mytrader-backend:${{ github.sha }}
            mytrader-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker image size check
        run: |
          docker images mytrader-backend:latest --format "{{.Size}}" > image-size.txt
          echo "Docker image size: $(cat image-size.txt)"

  notify-completion:
    name: Notify CI Completion
    runs-on: ubuntu-latest
    needs: [build-and-test, lint-and-format, security-scan]
    if: always()

    steps:
      - name: CI Status Summary
        run: |
          echo "=== Backend CI/CD Summary ==="
          echo "Build & Test: ${{ needs.build-and-test.result }}"
          echo "Lint & Format: ${{ needs.lint-and-format.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"

          if [ "${{ needs.build-and-test.result }}" != "success" ] || \
             [ "${{ needs.lint-and-format.result }}" != "success" ]; then
            echo "❌ CI FAILED"
            exit 1
          else
            echo "✅ CI PASSED"
          fi
