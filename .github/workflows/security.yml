name: Security Scanning

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: ['csharp', 'javascript']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Setup .NET 8 (for C# analysis)
        if: matrix.language == 'csharp'
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '8.0.x'

      - name: Build .NET solution (for C# analysis)
        if: matrix.language == 'csharp'
        run: |
          dotnet restore src/backend/myTraderGEO.sln
          dotnet build src/backend/myTraderGEO.sln --configuration Release --no-restore

      - name: Setup Node.js (for JavaScript analysis)
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: src/frontend/package-lock.json

      - name: Install frontend dependencies (for JavaScript analysis)
        if: matrix.language == 'javascript'
        run: |
          cd src/frontend
          npm ci

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-3.0, AGPL-3.0

  secret-scanning:
    name: Secret Scanning (Gitleaks)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better detection

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}  # Optional for Gitleaks+

  dotnet-security:
    name: .NET Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore src/backend/myTraderGEO.sln

      - name: Run NuGet vulnerability scan
        run: |
          dotnet list src/backend/myTraderGEO.sln package --vulnerable --include-transitive 2>&1 | tee nuget-vulnerabilities.txt

          if grep -q "has the following vulnerable packages" nuget-vulnerabilities.txt; then
            echo "::error::Vulnerabilidades críticas encontradas em pacotes NuGet"
            cat nuget-vulnerabilities.txt
            exit 1
          else
            echo "::notice::Nenhuma vulnerabilidade crítica encontrada em pacotes NuGet"
          fi

      - name: Upload NuGet vulnerability report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nuget-vulnerability-report
          path: nuget-vulnerabilities.txt

  npm-security:
    name: npm Security Audit
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: src/frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: src/frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=high --production 2>&1 | tee npm-audit.txt

          # Check for high/critical vulnerabilities
          if npm audit --audit-level=high --production; then
            echo "::notice::Nenhuma vulnerabilidade high/critical encontrada"
          else
            echo "::error::Vulnerabilidades high/critical encontradas em dependências npm"
            cat npm-audit.txt
            exit 1
          fi

      - name: Upload npm audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: src/frontend/npm-audit.txt

  docker-security:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    strategy:
      matrix:
        image: ['backend', 'frontend']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./05-infra/dockerfiles/${{ matrix.image }}/Dockerfile
          push: false
          load: true
          tags: mytrader-${{ matrix.image }}:scan

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: mytrader-${{ matrix.image }}:scan
          format: 'sarif'
          output: 'trivy-results-${{ matrix.image }}.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.image }}.sarif'
          category: docker-${{ matrix.image }}

      - name: Generate Trivy report (human-readable)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: mytrader-${{ matrix.image }}:scan
          format: 'table'
          output: 'trivy-report-${{ matrix.image }}.txt'

      - name: Upload Trivy report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-${{ matrix.image }}
          path: trivy-report-${{ matrix.image }}.txt

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, secret-scanning, dotnet-security, npm-security]
    if: always()

    steps:
      - name: Security Scan Summary
        run: |
          echo "=== Security Scan Summary ==="
          echo "CodeQL Analysis: ${{ needs.codeql-analysis.result }}"
          echo "Secret Scanning: ${{ needs.secret-scanning.result }}"
          echo ".NET Security: ${{ needs.dotnet-security.result }}"
          echo "npm Security: ${{ needs.npm-security.result }}"

          if [ "${{ needs.codeql-analysis.result }}" != "success" ] || \
             [ "${{ needs.secret-scanning.result }}" != "success" ] || \
             [ "${{ needs.dotnet-security.result }}" != "success" ] || \
             [ "${{ needs.npm-security.result }}" != "success" ]; then
            echo "❌ SECURITY ISSUES DETECTED"
            exit 1
          else
            echo "✅ ALL SECURITY SCANS PASSED"
          fi
