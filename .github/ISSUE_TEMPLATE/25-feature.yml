name: ‚öôÔ∏è Feature Implementation
description: Implementa√ß√£o t√©cnica de uma User Story
title: "[FEATURE] "
labels: ["feature", "implementation", "needs-triage"]
assignees: []
body:
  - type: markdown
    attributes:
      value: |
        ## ‚öôÔ∏è Template para Feature Implementation
        Issue para implementa√ß√£o t√©cnica de uma User Story.
        
  - type: input
    id: user-story-link
    attributes:
      label: User Story Relacionada
      description: Link para a user story que originou esta feature
      placeholder: "#145"
    validations:
      required: true
      
  - type: input
    id: bounded-context
    attributes:
      label: Bounded Context
      description: BC ao qual esta feature pertence
      placeholder: ex. Sales, Inventory, Billing
    validations:
      required: true
      
  - type: dropdown
    id: implementation-type
    attributes:
      label: Tipo de Implementa√ß√£o
      description: Qual aspecto da feature ser√° implementado?
      options:
        - üé® Frontend UI/UX
        - üîß Backend API/Logic
        - üîÑ Full-Stack Feature
        - üóÑÔ∏è Database Feature
        - üß™ Testing Feature
    validations:
      required: true
      
  - type: textarea
    id: feature-description
    attributes:
      label: Implementa√ß√£o T√©cnica
      description: Como esta parte espec√≠fica da User Story ser√° implementada
      placeholder: |
        **Objetivo T√©cnico:**
        Implementar [componente espec√≠fico] da User Story #XXX
        
        **Escopo desta Issue:**
        - [ ] Frontend: [componente espec√≠fico]
        - [ ] Backend: [API espec√≠fica]
        - [ ] Database: [mudan√ßa espec√≠fica]
    validations:
      required: true
      
  - type: textarea
    id: technical-requirements
    attributes:
      label: Requisitos T√©cnicos
      description: Especifica√ß√µes t√©cnicas baseadas nos artefatos do DE/DBA
      placeholder: |
        **Aggregate/Domain:**
        - Utilizar [Aggregate] do modelo de dom√≠nio
        - Aplicar regras de neg√≥cio: [lista]
        
        **API Endpoints:**
        - POST /api/orders (CreateOrder)
        - GET /api/orders/{id}
        
        **UI Components:**
        - OrderForm component
        - OrderList component
    validations:
      required: true
      
  - type: textarea
    id: acceptance-criteria
    attributes:
      label: Crit√©rios de Aceita√ß√£o
      description: Crit√©rios funcionais extra√≠dos da user story
      placeholder: |
        - [ ] Usu√°rio consegue [a√ß√£o] com sucesso
        - [ ] Sistema valida [regra de neg√≥cio]
        - [ ] Erro √© tratado quando [situa√ß√£o]
        - [ ] UI √© responsiva em mobile/desktop
    validations:
      required: true
      
  - type: dropdown
    id: story-points
    attributes:
      label: Story Points
      description: Complexidade estimada (baseada na US)
      options:
        - "1"
        - "2"
        - "3" 
        - "5"
        - "8"
        - "13"
      default: 2
    validations:
      required: true
      
  - type: dropdown
    id: priority
    attributes:
      label: Prioridade
      description: Prioridade da feature no sprint
      options:
        - "üî¥ High - MVP/Core Feature"
        - "üü° Medium - Important Feature"
        - "üü¢ Low - Nice to Have"
    validations:
      required: true
      
  - type: textarea
    id: ui-mockups
    attributes:
      label: Mockups/Wireframes (se Frontend)
      description: Refer√™ncia visual do UXD ou descri√ß√£o da UI
      placeholder: |
        - Link para mockup: [URL]
        - Componentes UI necess√°rios
        - Intera√ß√µes e estados
    validations:
      required: false
      
  - type: textarea
    id: api-contracts
    attributes:
      label: Contratos de API (se Backend)
      description: Especifica√ß√£o das APIs necess√°rias
      placeholder: |
        ```json
        POST /api/orders
        {
          "customerId": "123",
          "items": [...]
        }
        
        Response: 201 Created
        {
          "orderId": "456",
          "status": "created"
        }
        ```
    validations:
      required: false
      
  - type: textarea
    id: testing-strategy
    attributes:
      label: Estrat√©gia de Testes
      description: Como esta feature ser√° testada
      placeholder: |
        **Frontend:**
        - Component tests (jest/testing-library)
        - E2E tests (cypress/playwright)
        
        **Backend:**
        - Unit tests (aggregates/services)
        - Integration tests (API endpoints)
        - Database tests (repositories)
    validations:
      required: true
      
  - type: textarea
    id: dependencies
    attributes:
      label: Depend√™ncias T√©cnicas
      description: Issues ou tarefas que devem ser conclu√≠das primeiro
      placeholder: |
        - #123 (Order Aggregate implementado)
        - #124 (Database schema criado)
        - #125 (Authentication API pronto)
    validations:
      required: false
      
  - type: textarea
    id: definition-of-done
    attributes:
      label: Definition of Done
      description: Checklist t√©cnico para conclus√£o
      value: |
        - [ ] Feature implementada conforme especifica√ß√£o
        - [ ] Testes unit√°rios escritos e passando
        - [ ] Testes de integra√ß√£o/E2E passando
        - [ ] Code review aprovado
        - [ ] Documenta√ß√£o atualizada
        - [ ] Deploy em staging realizado
        - [ ] QA validation aprovada
    validations:
      required: false